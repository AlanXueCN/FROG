(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[46],{

/***/ "./imports/ui/App/APICall.js":
/*!***********************************!*\
  !*** ./imports/ui/App/APICall.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"../node_modules/react/index.js\"));\n\nvar _kadiraDochead = __webpack_require__(/*! meteor/kadira:dochead */ \"meteor/kadira:dochead\");\n\nvar _frogUtils = __webpack_require__(/*! frog-utils */ \"../frog-utils/src/index.js\");\n\nvar _MultiWrapper = _interopRequireDefault(__webpack_require__(/*! ../Dashboard/MultiWrapper */ \"./imports/ui/Dashboard/MultiWrapper.jsx\"));\n\nvar _logs = __webpack_require__(/*! ../../api/logs */ \"./imports/api/logs.js\");\n\nvar _Runner = __webpack_require__(/*! ../StudentView/Runner */ \"./imports/ui/StudentView/Runner.jsx\");\n\nvar _ApiForm = _interopRequireDefault(__webpack_require__(/*! ../GraphEditor/SidePanel/ApiForm */ \"./imports/ui/GraphEditor/SidePanel/ApiForm.js\"));\n\nvar _settings = __webpack_require__(/*! ../../api/settings */ \"./imports/api/settings.js\");\n\nvar _connection = __webpack_require__(/*! ./connection */ \"./imports/ui/App/connection.js\");\n\nvar _LearningItem = _interopRequireDefault(__webpack_require__(/*! ../LearningItem */ \"./imports/ui/LearningItem/index.js\"));\n\nvar _LIDashboard = _interopRequireDefault(__webpack_require__(/*! ../Dashboard/LIDashboard */ \"./imports/ui/Dashboard/LIDashboard.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _default = function _default(_ref) {\n  var data = _ref.data;\n  _settings.LocalSettings.api = true;\n\n  if (data.callType === 'learningItem') {\n    var doc = _connection.connection.get('li', (0, _frogUtils.uuid)());\n\n    var dataFn = (0, _frogUtils.generateReactiveFn)(doc, _LearningItem.default);\n    var LI = dataFn.LearningItem;\n    return React.createElement(\"div\", {\n      style: {\n        margin: '20px'\n      }\n    }, data.type === 'dashboard' ? React.createElement(_LIDashboard.default, {\n      id: data.learningItem\n    }) : React.createElement(LI, {\n      id: data.learningItem,\n      type: data.type\n    }));\n  }\n\n  if (data.callType === 'dashboard') {\n    return React.createElement(_MultiWrapper.default, {\n      activity: {\n        _id: [data.clientId, data.activityType, data.activityId || 'default'].join('-'),\n        activityType: data.activityType,\n        data: data.config,\n        length: 900,\n        startTime: 0\n      },\n      users: {},\n      config: data.config,\n      object: {\n        activityData: {\n          structure: 'all',\n          payload: {\n            all: {\n              data: {},\n              config: {}\n            }\n          }\n        },\n        socialStructure: {},\n        globalStructure: {\n          students: {},\n          studentIds: []\n        }\n      },\n      instances: [],\n      ready: true\n    });\n  }\n\n  if (data.callType === 'config') {\n    if (data.injectCSS) {\n      _kadiraDochead.DocHead.addLink({\n        rel: 'stylesheet',\n        type: 'text/css',\n        href: data.injectCSS\n      });\n    }\n\n    return React.createElement(_ApiForm.default, {\n      whiteList: data.whiteList,\n      activityType: data.activityType,\n      config: data.config,\n      hidePreview: true,\n      noOffset: true,\n      hideValidator: !data.showValidator,\n      hideLibrary: !data.showLibrary,\n      showDelete: data.showDelete\n    });\n  } else {\n    var actId = [data.clientId, data.activityType, data.activityId || 'default'].join('-');\n    var logger = (0, _logs.createLogger)('headless/' + data.clientId, data.rawInstanceId, {\n      _id: actId,\n      activityType: data.activityType\n    }, data.rawInstanceId);\n    var activityData = {\n      data: data.activityData,\n      config: data.config || {}\n    };\n    var apilogger = data.readOnly ? function () {} : function (msg) {\n      logger(msg);\n      var logs = Array.isArray(msg) ? msg : [msg];\n      logs.forEach(function (log) {\n        window.parent.postMessage({\n          type: 'frog-log',\n          msg: _objectSpread({\n            id: (0, _frogUtils.uuid)(),\n            activityType: data.activityType,\n            username: data.userName,\n            userid: data.userId,\n            timestamp: new Date()\n          }, log)\n        }, '*');\n      });\n    };\n    return React.createElement(_Runner.RunActivity, {\n      logger: apilogger,\n      readOnly: data.readOnly,\n      activityTypeId: data.activityType,\n      username: data.userName || 'Anonymous',\n      userid: data.userId || '1',\n      stream: function stream() {},\n      reactiveId: data.instanceId,\n      groupingValue: data.instanceId,\n      activityData: activityData,\n      rawData: data.rawData,\n      sessionId: data.activityId,\n      activityId: data.activityId,\n      groupingKey: \"group\"\n    });\n  }\n};\n\nexports.default = _default;\n\n//# sourceURL=webpack:///./imports/ui/App/APICall.js?");

/***/ })

}]);
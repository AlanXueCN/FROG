(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[44],{

/***/ "../ac/ac-timedQuiz/src/ActivityRunner.js":
/*!************************************************!*\
  !*** ../ac/ac-timedQuiz/src/ActivityRunner.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"../node_modules/react/index.js\"));\n\nvar _frogUtils = __webpack_require__(/*! frog-utils */ \"../frog-utils/src/index.js\");\n\nvar _reactBootstrap = __webpack_require__(/*! react-bootstrap */ \"../node_modules/react-bootstrap/es/index.js\");\n\nvar _recompose = __webpack_require__(/*! recompose */ \"../node_modules/recompose/dist/Recompose.esm.js\");\n\nvar _lodash = __webpack_require__(/*! lodash */ \"../node_modules/lodash/lodash.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar styles = {\n  button: {\n    width: 'auto',\n    margin: '10px',\n    position: 'relative',\n    whiteSpace: 'normal',\n    float: 'center',\n    display: 'inline-block'\n  },\n  text: {\n    width: '100%',\n    fontSize: 'large',\n    textAlign: 'center'\n  },\n  guidelines: {\n    width: '100%'\n  },\n  container: {\n    width: '500px',\n    height: '400px',\n    margin: 'auto',\n    marginTop: '80px'\n  },\n  main: {\n    width: '100%',\n    height: '100%',\n    position: 'absolute'\n  },\n  commands: {\n    width: '100%',\n    height: '50px',\n    margin: 'auto',\n    position: 'relative',\n    marginTop: '50px',\n    display: 'block'\n  }\n};\n\nvar questionsWithIndex = function questionsWithIndex(props) {\n  var indexed = props.activityData.config.questions.filter(function (q) {\n    return q.question && q.answers;\n  }).map(function (x, i) {\n    return [x, i];\n  });\n  return indexed;\n};\n\nvar shuffledQuestions = function shuffledQuestions(props) {\n  var questions = ['questions', 'both'].includes(props.activityData.config.shuffle) ? (0, _lodash.shuffle)(questionsWithIndex(props)) : questionsWithIndex(props);\n  return questions;\n};\n\nvar generateExample = function generateExample(q, progress) {\n  var curQuestion = q[progress % q.length];\n  var startTime = Date.now();\n  return {\n    curQuestion: curQuestion,\n    startTime: startTime\n  };\n};\n\nvar noAnswerTimeout;\nvar delayTimeout;\n\nvar Guidelines = function Guidelines(_ref) {\n  var start = _ref.start,\n      guidelines = _ref.guidelines,\n      name = _ref.name;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: styles.text\n  }, \"Welcome \", name, \"!\"), React.createElement(\"div\", {\n    style: styles.guidelines\n  }, React.createElement(_frogUtils.HTML, {\n    html: guidelines\n  })), React.createElement(\"div\", {\n    style: _objectSpread({}, styles.commands, {\n      width: '120px'\n    })\n  }, React.createElement(_reactBootstrap.Button, {\n    style: _objectSpread({}, styles.button, {\n      width: '100%'\n    }),\n    onClick: start\n  }, 'Start')));\n};\n\nvar CountDownTimer = (0, _frogUtils.TimedComponent)(function (_ref2) {\n  var timeNow = _ref2.timeNow,\n      length = _ref2.length,\n      start = _ref2.start;\n  var timeLeft = Math.ceil((length - Math.ceil(timeNow - start)) / 1000);\n  return React.createElement(\"div\", {\n    style: styles.text\n  }, timeLeft + ' s');\n}, 100);\n\nvar Delay = function Delay(_ref3) {\n  var next = _ref3.next,\n      delay = _ref3.delay;\n  clearTimeout(delayTimeout);\n  delayTimeout = setTimeout(next, delay);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: styles.text\n  }, \"Waiting for next question\"), React.createElement(CountDownTimer, {\n    start: Date.now(),\n    length: delay\n  }));\n};\n\nvar Question = function Question(props) {\n  var setQuestion = props.setQuestion,\n      question = props.question,\n      logger = props.logger,\n      data = props.data,\n      dataFn = props.dataFn,\n      activityData = props.activityData;\n  var curQuestion = question.curQuestion,\n      startTime = question.startTime;\n  var answers = ['answers', 'both'].includes(activityData.config.shuffle) ? (0, _lodash.shuffle)(curQuestion[0].answers) : curQuestion[0].answers;\n\n  var onClick = function onClick(answer) {\n    return function () {\n      clearTimeout(noAnswerTimeout); // Logs the question and answer provided\n\n      var answerTime = Date.now(); // Increases the progress and logs the new progress\n\n      dataFn.numIncr(1, 'progress'); // Increases the score and logs the new score\n\n      var isCorrectAnswer = answer === undefined || answer.isCorrect === undefined || !answer.isCorrect ? 0 : 1;\n      var timeIncr = Date.now() - startTime;\n      var value = [data.score + isCorrectAnswer, -(data.time + timeIncr)];\n      logger([{\n        type: 'answer',\n        payload: _objectSpread({}, question, {\n          answer: answer,\n          answerTime: answerTime\n        })\n      }, {\n        type: 'progress',\n        value: (data.progress + 1) / activityData.config.questions.length\n      }, {\n        type: 'score',\n        value: value\n      }]);\n      dataFn.numIncr(isCorrectAnswer, 'score');\n      dataFn.numIncr(timeIncr, 'time'); // Goes on to next question\n\n      if (data.progress + 1 < activityData.config.questions.length) {\n        setQuestion('waiting');\n      }\n    };\n  };\n\n  clearTimeout(noAnswerTimeout);\n  noAnswerTimeout = setTimeout(onClick(undefined), activityData.config.maxTime);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: styles.text\n  }, React.createElement(_frogUtils.HTML, {\n    html: curQuestion[0].question\n  })), React.createElement(\"div\", {\n    style: styles.commands\n  }, answers.map(function (option) {\n    var key = curQuestion[1] + option.choice;\n    return React.createElement(_reactBootstrap.Button, {\n      key: key,\n      style: _objectSpread({}, styles.button),\n      onClick: onClick(option)\n    }, option.choice);\n  })), React.createElement(CountDownTimer, {\n    start: Date.now(),\n    length: activityData.config.maxTime\n  }));\n};\n\nvar Main = (0, _recompose.withState)('question', 'setQuestion', null)(function (props) {\n  var activityData = props.activityData,\n      question = props.question,\n      setQuestion = props.setQuestion,\n      data = props.data,\n      logger = props.logger;\n  var _activityData$config = activityData.config,\n      questions = _activityData$config.questions,\n      delay = _activityData$config.delay,\n      guidelines = _activityData$config.guidelines;\n  var name = props.userInfo.name;\n  var shuffledQ = questionsWithIndex(props);\n\n  if (question === null) {\n    shuffledQ = shuffledQuestions(props);\n\n    var start = function start() {\n      setQuestion('waiting');\n      logger([{\n        type: 'progress',\n        value: data.progress / activityData.config.questions.length\n      }]);\n    };\n\n    return React.createElement(Guidelines, {\n      start: start,\n      guidelines: guidelines,\n      name: name\n    });\n  } else if (question === 'waiting') {\n    var next = function next() {\n      setQuestion(generateExample(shuffledQ, data.progress));\n    };\n\n    return React.createElement(Delay, {\n      next: next,\n      delay: delay,\n      props: props\n    });\n  } else if (data.progress < questions.length) {\n    return React.createElement(Question, props);\n  } else {\n    return React.createElement(\"div\", {\n      style: styles.text\n    }, \"Activity completed! Thank you\");\n  }\n}); // the actual component that the student sees\n\nvar Runner = function Runner(props) {\n  var data = props.data,\n      activityData = props.activityData;\n  var questions = activityData.config.questions;\n  var p = Math.round(100 * data.progress / questions.length);\n  return React.createElement(\"div\", {\n    className: \"bootstrap\",\n    style: styles.main\n  }, React.createElement(_reactBootstrap.ProgressBar, {\n    now: p,\n    label: \"\".concat(p, \"%\")\n  }), React.createElement(\"div\", {\n    style: styles.container\n  }, React.createElement(Main, props)));\n};\n\nvar ActivityRunner =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ActivityRunner, _React$Component);\n\n  function ActivityRunner() {\n    _classCallCheck(this, ActivityRunner);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActivityRunner).apply(this, arguments));\n  }\n\n  _createClass(ActivityRunner, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(delayTimeout);\n      clearTimeout(noAnswerTimeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.data && React.createElement(Runner, this.props);\n    }\n  }]);\n\n  return ActivityRunner;\n}(React.Component);\n\nexports.default = ActivityRunner;\n\n//# sourceURL=webpack:///../ac/ac-timedQuiz/src/ActivityRunner.js?");

/***/ })

}]);
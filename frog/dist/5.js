(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "../node_modules/@houshuang/react-flip-move/lib/FlipMove.js":
/*!******************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/FlipMove.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\n__webpack_require__(/*! ./polyfills */ \"../node_modules/@houshuang/react-flip-move/lib/polyfills.js\");\n\nvar _propConverter = __webpack_require__(/*! ./prop-converter */ \"../node_modules/@houshuang/react-flip-move/lib/prop-converter.js\");\n\nvar _propConverter2 = _interopRequireDefault(_propConverter);\n\nvar _domManipulation = __webpack_require__(/*! ./dom-manipulation */ \"../node_modules/@houshuang/react-flip-move/lib/dom-manipulation.js\");\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"../node_modules/@houshuang/react-flip-move/lib/helpers.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n/**\n * React Flip Move\n * (c) 2016-present Joshua Comeau\n *\n * For information on how this code is laid out, check out CODE_TOUR.md\n */\n\n/* eslint-disable react/prop-types */\n\nvar transitionEnd = (0, _domManipulation.whichTransitionEvent)();\nvar noBrowserSupport = !transitionEnd;\n\nfunction getKey(childData) {\n  return childData.key || '';\n}\n\nvar FlipMove = function (_Component) {\n  _inherits(FlipMove, _Component);\n\n  function FlipMove() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FlipMove);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FlipMove.__proto__ || Object.getPrototypeOf(FlipMove)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      children: _react.Children.toArray(_this.props.children).map(function (element) {\n        return _extends({}, element, {\n          element: element,\n          appearing: true\n        });\n      })\n    }, _this.childrenData = {}, _this.parentData = {\n      domNode: null,\n      boundingBox: null\n    }, _this.heightPlaceholderData = {\n      domNode: null\n    }, _this.remainingAnimations = 0, _this.childrenToAnimate = [], _this.runAnimation = function () {\n      var dynamicChildren = _this.state.children.filter(_this.doesChildNeedToBeAnimated);\n\n      dynamicChildren.forEach(function (child, n) {\n        _this.remainingAnimations += 1;\n        _this.childrenToAnimate.push(getKey(child));\n        _this.animateChild(child, n);\n      });\n\n      if (typeof _this.props.onStartAll === 'function') {\n        _this.callChildrenHook(_this.props.onStartAll);\n      }\n    }, _this.doesChildNeedToBeAnimated = function (child) {\n      // If the child doesn't have a key, it's an immovable child (one that we\n      // do not want to do FLIP stuff to.)\n      if (!getKey(child)) {\n        return false;\n      }\n\n      var childData = _this.getChildData(getKey(child));\n      var childDomNode = childData.domNode;\n      var childBoundingBox = childData.boundingBox;\n      var parentBoundingBox = _this.parentData.boundingBox;\n\n      if (!childDomNode) {\n        return false;\n      }\n\n      var _this$props = _this.props,\n          appearAnimation = _this$props.appearAnimation,\n          enterAnimation = _this$props.enterAnimation,\n          leaveAnimation = _this$props.leaveAnimation,\n          getPosition = _this$props.getPosition;\n\n\n      var isAppearingWithAnimation = child.appearing && appearAnimation;\n      var isEnteringWithAnimation = child.entering && enterAnimation;\n      var isLeavingWithAnimation = child.leaving && leaveAnimation;\n\n      if (isAppearingWithAnimation || isEnteringWithAnimation || isLeavingWithAnimation) {\n        return true;\n      }\n\n      // If it isn't entering/leaving, we want to animate it if it's\n      // on-screen position has changed.\n\n      var _getPositionDelta = (0, _domManipulation.getPositionDelta)({\n        childDomNode: childDomNode,\n        childBoundingBox: childBoundingBox,\n        parentBoundingBox: parentBoundingBox,\n        getPosition: getPosition\n      }),\n          _getPositionDelta2 = _slicedToArray(_getPositionDelta, 2),\n          dX = _getPositionDelta2[0],\n          dY = _getPositionDelta2[1];\n\n      return dX !== 0 || dY !== 0;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  // Copy props.children into state.\n  // To understand why this is important (and not an anti-pattern), consider\n  // how \"leave\" animations work. An item has \"left\" when the component\n  // receives a new set of props that do NOT contain the item.\n  // If we just render the props as-is, the item would instantly disappear.\n  // We want to keep the item rendered for a little while, until its animation\n  // can complete. Because we cannot mutate props, we make `state` the source\n  // of truth.\n\n\n  // FlipMove needs to know quite a bit about its children in order to do\n  // its job. We store these as a property on the instance. We're not using\n  // state, because we don't want changes to trigger re-renders, we just\n  // need a place to keep the data for reference, when changes happen.\n  // This field should not be accessed directly. Instead, use getChildData,\n  // putChildData, etc...\n\n\n  // Similarly, track the dom node and box of our parent element.\n\n\n  // If `maintainContainerHeight` prop is set to true, we'll create a\n  // placeholder element which occupies space so that the parent height\n  // doesn't change when items are removed from the document flow (which\n  // happens during leave animations)\n\n\n  // Keep track of remaining animations so we know when to fire the\n  // all-finished callback, and clean up after ourselves.\n  // NOTE: we can't simply use childrenToAnimate.length to track remaining\n  // animations, because we need to maintain the list of animating children,\n  // to pass to the `onFinishAll` handler.\n\n\n  _createClass(FlipMove, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Run our `appearAnimation` if it was requested, right after the\n      // component mounts.\n      var shouldTriggerFLIP = this.props.appearAnimation && !this.isAnimationDisabled(this.props);\n\n      if (shouldTriggerFLIP) {\n        this.prepForAnimation();\n        this.runAnimation();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // When the component is handed new props, we need to figure out the\n      // \"resting\" position of all currently-rendered DOM nodes.\n      // We store that data in this.parent and this.children,\n      // so it can be used later to work out the animation.\n      this.updateBoundingBoxCaches();\n\n      // Convert opaque children object to array.\n      var nextChildren = _react.Children.toArray(nextProps.children);\n\n      // Next, we need to update our state, so that it contains our new set of\n      // children. If animation is disabled or unsupported, this is easy;\n      // we just copy our props into state.\n      // Assuming that we can animate, though, we have to do some work.\n      // Essentially, we want to keep just-deleted nodes in the DOM for a bit\n      // longer, so that we can animate them away.\n      this.setState({\n        children: this.isAnimationDisabled(nextProps) ? nextChildren.map(function (element) {\n          return _extends({}, element, { element: element });\n        }) : this.calculateNextSetOfChildren(nextChildren)\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(previousProps) {\n      // If the children have been re-arranged, moved, or added/removed,\n      // trigger the main FLIP animation.\n      //\n      // IMPORTANT: We need to make sure that the children have actually changed.\n      // At the end of the transition, we clean up nodes that need to be removed.\n      var oldChildrenKeys = _react.Children.toArray(this.props.children).map(function (d) {\n        return d.key;\n      });\n      var nextChildrenKeys = _react.Children.toArray(previousProps.children).map(function (d) {\n        return d.key;\n      });\n\n      var shouldTriggerFLIP = !(0, _helpers.arraysEqual)(oldChildrenKeys, nextChildrenKeys) && !this.isAnimationDisabled(this.props);\n\n      if (shouldTriggerFLIP) {\n        this.prepForAnimation();\n        this.runAnimation();\n      }\n    }\n  }, {\n    key: 'calculateNextSetOfChildren',\n    value: function calculateNextSetOfChildren(nextChildren) {\n      var _this2 = this;\n\n      // We want to:\n      //   - Mark all new children as `entering`\n      //   - Pull in previous children that aren't in nextChildren, and mark them\n      //     as `leaving`\n      //   - Preserve the nextChildren list order, with leaving children in their\n      //     appropriate places.\n      //\n\n      var updatedChildren = nextChildren.map(function (nextChild) {\n        var child = _this2.findChildByKey(nextChild.key || '');\n\n        // If the current child did exist, but it was in the midst of leaving,\n        // we want to treat it as though it's entering\n        var isEntering = !child || child.leaving;\n\n        return _extends({}, nextChild, { element: nextChild, entering: isEntering });\n      });\n\n      // This is tricky. We want to keep the nextChildren's ordering, but with\n      // any just-removed items maintaining their original position.\n      // eg.\n      //   this.state.children  = [ 1, 2, 3, 4 ]\n      //   nextChildren         = [ 3, 1 ]\n      //\n      // In this example, we've removed the '2' & '4'\n      // We want to end up with:  [ 2, 3, 1, 4 ]\n      //\n      // To accomplish that, we'll iterate through this.state.children. whenever\n      // we find a match, we'll append our `leaving` flag to it, and insert it\n      // into the nextChildren in its ORIGINAL position. Note that, as we keep\n      // inserting old items into the new list, the \"original\" position will\n      // keep incrementing.\n      var numOfChildrenLeaving = 0;\n      this.state.children.forEach(function (child, index) {\n        var isLeaving = !nextChildren.find(function (_ref2) {\n          var key = _ref2.key;\n          return key === getKey(child);\n        });\n\n        // If the child isn't leaving (or, if there is no leave animation),\n        // we don't need to add it into the state children.\n        if (!isLeaving || !_this2.props.leaveAnimation) return;\n\n        var nextChild = _extends({}, child, { leaving: true });\n        var nextChildIndex = index + numOfChildrenLeaving;\n\n        updatedChildren.splice(nextChildIndex, 0, nextChild);\n        numOfChildrenLeaving += 1;\n      });\n\n      return updatedChildren;\n    }\n  }, {\n    key: 'prepForAnimation',\n    value: function prepForAnimation() {\n      var _this3 = this;\n\n      // Our animation prep consists of:\n      // - remove children that are leaving from the DOM flow, so that the new\n      //   layout can be accurately calculated,\n      // - update the placeholder container height, if needed, to ensure that\n      //   the parent's height doesn't collapse.\n\n      var _props = this.props,\n          leaveAnimation = _props.leaveAnimation,\n          maintainContainerHeight = _props.maintainContainerHeight,\n          getPosition = _props.getPosition;\n\n      // we need to make all leaving nodes \"invisible\" to the layout calculations\n      // that will take place in the next step (this.runAnimation).\n\n      if (leaveAnimation) {\n        var leavingChildren = this.state.children.filter(function (child) {\n          return child.leaving;\n        });\n\n        leavingChildren.forEach(function (leavingChild) {\n          var childData = _this3.getChildData(getKey(leavingChild));\n\n          // We need to take the items out of the \"flow\" of the document, so that\n          // its siblings can move to take its place.\n          if (childData.boundingBox) {\n            (0, _domManipulation.removeNodeFromDOMFlow)(childData, _this3.props.verticalAlignment);\n          }\n        });\n\n        if (maintainContainerHeight && this.heightPlaceholderData.domNode) {\n          (0, _domManipulation.updateHeightPlaceholder)({\n            domNode: this.heightPlaceholderData.domNode,\n            parentData: this.parentData,\n            getPosition: getPosition\n          });\n        }\n      }\n\n      // For all children not in the middle of entering or leaving,\n      // we need to reset the transition, so that the NEW shuffle starts from\n      // the right place.\n      this.state.children.forEach(function (child) {\n        var _getChildData = _this3.getChildData(getKey(child)),\n            domNode = _getChildData.domNode;\n\n        // Ignore children that don't render DOM nodes (eg. by returning null)\n\n\n        if (!domNode) {\n          return;\n        }\n\n        if (!child.entering && !child.leaving) {\n          (0, _domManipulation.applyStylesToDOMNode)({\n            domNode: domNode,\n            styles: {\n              transition: ''\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: 'animateChild',\n    value: function animateChild(child, index) {\n      var _this4 = this;\n\n      var _getChildData2 = this.getChildData(getKey(child)),\n          domNode = _getChildData2.domNode;\n\n      if (!domNode) {\n        return;\n      }\n\n      // Apply the relevant style for this DOM node\n      // This is the offset from its actual DOM position.\n      // eg. if an item has been re-rendered 20px lower, we want to apply a\n      // style of 'transform: translate(-20px)', so that it appears to be where\n      // it started.\n      // In FLIP terminology, this is the 'Invert' stage.\n      (0, _domManipulation.applyStylesToDOMNode)({\n        domNode: domNode,\n        styles: this.computeInitialStyles(child)\n      });\n\n      // Start by invoking the onStart callback for this child.\n      if (this.props.onStart) this.props.onStart(child, domNode);\n\n      // Next, animate the item from it's artificially-offset position to its\n      // new, natural position.\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          // NOTE, RE: the double-requestAnimationFrame:\n          // Sadly, this is the most browser-compatible way to do this I've found.\n          // Essentially we need to set the initial styles outside of any request\n          // callbacks to avoid batching them. Then, a frame needs to pass with\n          // the styles above rendered. Then, on the second frame, we can apply\n          // our final styles to perform the animation.\n\n          // Our first order of business is to \"undo\" the styles applied in the\n          // previous frames, while also adding a `transition` property.\n          // This way, the item will smoothly transition from its old position\n          // to its new position.\n\n          // eslint-disable-next-line flowtype/require-variable-type\n          var styles = {\n            transition: (0, _domManipulation.createTransitionString)(index, _this4.props),\n            transform: '',\n            opacity: ''\n          };\n\n          if (child.appearing && _this4.props.appearAnimation) {\n            styles = _extends({}, styles, _this4.props.appearAnimation.to);\n          } else if (child.entering && _this4.props.enterAnimation) {\n            styles = _extends({}, styles, _this4.props.enterAnimation.to);\n          } else if (child.leaving && _this4.props.leaveAnimation) {\n            styles = _extends({}, styles, _this4.props.leaveAnimation.to);\n          }\n\n          // In FLIP terminology, this is the 'Play' stage.\n          (0, _domManipulation.applyStylesToDOMNode)({ domNode: domNode, styles: styles });\n        });\n      });\n\n      this.bindTransitionEndHandler(child);\n    }\n  }, {\n    key: 'bindTransitionEndHandler',\n    value: function bindTransitionEndHandler(child) {\n      var _this5 = this;\n\n      var _getChildData3 = this.getChildData(getKey(child)),\n          domNode = _getChildData3.domNode;\n\n      if (!domNode) {\n        return;\n      }\n\n      // The onFinish callback needs to be bound to the transitionEnd event.\n      // We also need to unbind it when the transition completes, so this ugly\n      // inline function is required (we need it here so it closes over\n      // dependent variables `child` and `domNode`)\n      var transitionEndHandler = function transitionEndHandler(ev) {\n        // It's possible that this handler is fired not on our primary transition,\n        // but on a nested transition (eg. a hover effect). Ignore these cases.\n        if (ev.target !== domNode) return;\n\n        // Remove the 'transition' inline style we added. This is cleanup.\n        domNode.style.transition = '';\n\n        // Trigger any applicable onFinish/onFinishAll hooks\n        _this5.triggerFinishHooks(child, domNode);\n\n        domNode.removeEventListener(transitionEnd, transitionEndHandler);\n\n        if (child.leaving) {\n          _this5.removeChildData(getKey(child));\n        }\n      };\n\n      domNode.addEventListener(transitionEnd, transitionEndHandler);\n    }\n  }, {\n    key: 'triggerFinishHooks',\n    value: function triggerFinishHooks(child, domNode) {\n      var _this6 = this;\n\n      if (this.props.onFinish) this.props.onFinish(child, domNode);\n\n      // Reduce the number of children we need to animate by 1,\n      // so that we can tell when all children have finished.\n      this.remainingAnimations -= 1;\n\n      if (this.remainingAnimations === 0) {\n        // Remove any items from the DOM that have left, and reset `entering`.\n        var nextChildren = this.state.children.filter(function (_ref3) {\n          var leaving = _ref3.leaving;\n          return !leaving;\n        }).map(function (item) {\n          return _extends({}, item, {\n            appearing: false,\n            entering: false\n          });\n        });\n\n        this.setState({ children: nextChildren }, function () {\n          if (typeof _this6.props.onFinishAll === 'function') {\n            _this6.callChildrenHook(_this6.props.onFinishAll);\n          }\n\n          // Reset our variables for the next iteration\n          _this6.childrenToAnimate = [];\n        });\n\n        // If the placeholder was holding the container open while elements were\n        // leaving, we we can now set its height to zero.\n        if (this.heightPlaceholderData.domNode) {\n          this.heightPlaceholderData.domNode.style.height = '0';\n        }\n      }\n    }\n  }, {\n    key: 'callChildrenHook',\n    value: function callChildrenHook(hook) {\n      var _this7 = this;\n\n      var elements = [];\n      var domNodes = [];\n\n      this.childrenToAnimate.forEach(function (childKey) {\n        // If this was an exit animation, the child may no longer exist.\n        // If so, skip it.\n        var child = _this7.findChildByKey(childKey);\n\n        if (!child) {\n          return;\n        }\n\n        elements.push(child);\n\n        if (_this7.hasChildData(childKey)) {\n          domNodes.push(_this7.getChildData(childKey).domNode);\n        }\n      });\n\n      hook(elements, domNodes);\n    }\n  }, {\n    key: 'updateBoundingBoxCaches',\n    value: function updateBoundingBoxCaches() {\n      var _this8 = this;\n\n      // This is the ONLY place that parentData and childrenData's\n      // bounding boxes are updated. They will be calculated at other times\n      // to be compared to this value, but it's important that the cache is\n      // updated once per update.\n      var parentDomNode = this.parentData.domNode;\n\n      if (!parentDomNode) {\n        return;\n      }\n\n      this.parentData.boundingBox = this.props.getPosition(parentDomNode);\n\n      this.state.children.forEach(function (child) {\n        var childKey = getKey(child);\n\n        // It is possible that a child does not have a `key` property;\n        // Ignore these children, they don't need to be moved.\n        if (!childKey) {\n          return;\n        }\n\n        // In very rare circumstances, for reasons unknown, the ref is never\n        // populated for certain children. In this case, avoid doing this update.\n        // see: https://github.com/joshwcomeau/react-flip-move/pull/91\n        if (!_this8.hasChildData(childKey)) {\n          return;\n        }\n\n        var childData = _this8.getChildData(childKey);\n\n        // If the child element returns null, we need to avoid trying to\n        // account for it\n        if (!childData.domNode || !child) {\n          return;\n        }\n\n        _this8.setChildData(childKey, {\n          boundingBox: (0, _domManipulation.getRelativeBoundingBox)({\n            childDomNode: childData.domNode,\n            parentDomNode: parentDomNode,\n            getPosition: _this8.props.getPosition\n          })\n        });\n      });\n    }\n  }, {\n    key: 'computeInitialStyles',\n    value: function computeInitialStyles(child) {\n      if (child.appearing) {\n        return this.props.appearAnimation ? this.props.appearAnimation.from : {};\n      } else if (child.entering) {\n        if (!this.props.enterAnimation) {\n          return {};\n        }\n        // If this child was in the middle of leaving, it still has its\n        // absolute positioning styles applied. We need to undo those.\n        return _extends({\n          position: '',\n          top: '',\n          left: '',\n          right: '',\n          bottom: ''\n        }, this.props.enterAnimation.from);\n      } else if (child.leaving) {\n        return this.props.leaveAnimation ? this.props.leaveAnimation.from : {};\n      }\n\n      var childData = this.getChildData(getKey(child));\n      var childDomNode = childData.domNode;\n      var childBoundingBox = childData.boundingBox;\n      var parentBoundingBox = this.parentData.boundingBox;\n\n      if (!childDomNode) {\n        return {};\n      }\n\n      var _getPositionDelta3 = (0, _domManipulation.getPositionDelta)({\n        childDomNode: childDomNode,\n        childBoundingBox: childBoundingBox,\n        parentBoundingBox: parentBoundingBox,\n        getPosition: this.props.getPosition\n      }),\n          _getPositionDelta4 = _slicedToArray(_getPositionDelta3, 2),\n          dX = _getPositionDelta4[0],\n          dY = _getPositionDelta4[1];\n\n      return {\n        transform: 'translate(' + dX + 'px, ' + dY + 'px)'\n      };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'isAnimationDisabled',\n    value: function isAnimationDisabled(props) {\n      // If the component is explicitly passed a `disableAllAnimations` flag,\n      // we can skip this whole process. Similarly, if all of the numbers have\n      // been set to 0, there is no point in trying to animate; doing so would\n      // only cause a flicker (and the intent is probably to disable animations)\n      // We can also skip this rigamarole if there's no browser support for it.\n      return noBrowserSupport || props.disableAllAnimations || props.duration === 0 && props.delay === 0 && props.staggerDurationBy === 0 && props.staggerDelayBy === 0;\n    }\n  }, {\n    key: 'findChildByKey',\n    value: function findChildByKey(key) {\n      return this.state.children.find(function (child) {\n        return getKey(child) === key;\n      });\n    }\n  }, {\n    key: 'hasChildData',\n    value: function hasChildData(key) {\n      // Object has some built-in properties on its prototype, such as toString.  hasOwnProperty makes\n      // sure that key is present on childrenData itself, not on its prototype.\n      return Object.prototype.hasOwnProperty.call(this.childrenData, key);\n    }\n  }, {\n    key: 'getChildData',\n    value: function getChildData(key) {\n      return this.hasChildData(key) ? this.childrenData[key] : {};\n    }\n  }, {\n    key: 'setChildData',\n    value: function setChildData(key, data) {\n      this.childrenData[key] = _extends({}, this.getChildData(key), data);\n    }\n  }, {\n    key: 'removeChildData',\n    value: function removeChildData(key) {\n      delete this.childrenData[key];\n    }\n  }, {\n    key: 'createHeightPlaceholder',\n    value: function createHeightPlaceholder() {\n      var _this9 = this;\n\n      var typeName = this.props.typeName;\n\n      // If requested, create an invisible element at the end of the list.\n      // Its height will be modified to prevent the container from collapsing\n      // prematurely.\n\n      var isContainerAList = typeName === 'ul' || typeName === 'ol';\n      var placeholderType = isContainerAList ? 'li' : 'div';\n\n      return _react2.default.createElement(placeholderType, {\n        key: 'height-placeholder',\n        ref: function ref(domNode) {\n          _this9.heightPlaceholderData.domNode = domNode;\n        },\n        style: { visibility: 'hidden', height: 0 }\n      });\n    }\n  }, {\n    key: 'childrenWithRefs',\n    value: function childrenWithRefs() {\n      var _this10 = this;\n\n      // We need to clone the provided children, capturing a reference to the\n      // underlying DOM node. Flip Move needs to use the React escape hatches to\n      // be able to do its calculations.\n      return this.state.children.map(function (child) {\n        return _react2.default.cloneElement(child.element, {\n          ref: function ref(element) {\n            // Stateless Functional Components are not supported by FlipMove,\n            // because they don't have instances.\n            if (!element) {\n              return;\n            }\n\n            var domNode = (0, _domManipulation.getNativeNode)(element);\n            _this10.setChildData(getKey(child), { domNode: domNode });\n          }\n        });\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this11 = this;\n\n      var _props2 = this.props,\n          typeName = _props2.typeName,\n          delegated = _props2.delegated,\n          leaveAnimation = _props2.leaveAnimation,\n          maintainContainerHeight = _props2.maintainContainerHeight;\n\n\n      var props = _extends({}, delegated, {\n        ref: function ref(node) {\n          _this11.parentData.domNode = node;\n        }\n      });\n\n      var children = this.childrenWithRefs();\n      if (leaveAnimation && maintainContainerHeight) {\n        children.push(this.createHeightPlaceholder());\n      }\n\n      return _react2.default.createElement(typeName, props, children);\n    }\n  }]);\n\n  return FlipMove;\n}(_react.Component);\n\nexports.default = (0, _propConverter2.default)(FlipMove);\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/FlipMove.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/dom-manipulation.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/dom-manipulation.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTransitionString = exports.getNativeNode = exports.updateHeightPlaceholder = exports.removeNodeFromDOMFlow = exports.getPositionDelta = exports.getRelativeBoundingBox = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n/**\n * React Flip Move\n * (c) 2016-present Joshua Comeau\n *\n * These methods read from and write to the DOM.\n * They almost always have side effects, and will hopefully become the\n * only spot in the codebase with impure functions.\n */\n\n\nexports.applyStylesToDOMNode = applyStylesToDOMNode;\nexports.whichTransitionEvent = whichTransitionEvent;\n\nvar _reactDom = __webpack_require__(/*! react-dom */ \"../node_modules/react-dom/index.js\");\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"../node_modules/@houshuang/react-flip-move/lib/helpers.js\");\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction applyStylesToDOMNode(_ref) {\n  var domNode = _ref.domNode,\n      styles = _ref.styles;\n\n  // Can't just do an object merge because domNode.styles is no regular object.\n  // Need to do it this way for the engine to fire its `set` listeners.\n  Object.keys(styles).forEach(function (key) {\n    domNode.style.setProperty((0, _helpers.hyphenate)(key), styles[key]);\n  });\n}\n\n// Modified from Modernizr\nfunction whichTransitionEvent() {\n  var transitions = {\n    transition: 'transitionend',\n    '-o-transition': 'oTransitionEnd',\n    '-moz-transition': 'transitionend',\n    '-webkit-transition': 'webkitTransitionEnd'\n  };\n\n  // If we're running in a browserless environment (eg. SSR), it doesn't apply.\n  // Return a placeholder string, for consistent type return.\n  if (typeof document === 'undefined') return '';\n\n  var el = document.createElement('fakeelement');\n\n  var match = Object.keys(transitions).find(function (t) {\n    return el.style.getPropertyValue(t) !== undefined;\n  });\n\n  // If no `transition` is found, we must be running in a browser so ancient,\n  // React itself won't run. Return an empty string, for consistent type return\n  return match ? transitions[match] : '';\n}\n\nvar getRelativeBoundingBox = exports.getRelativeBoundingBox = function getRelativeBoundingBox(_ref2) {\n  var childDomNode = _ref2.childDomNode,\n      parentDomNode = _ref2.parentDomNode,\n      getPosition = _ref2.getPosition;\n\n  var parentBox = getPosition(parentDomNode);\n\n  var _getPosition = getPosition(childDomNode),\n      top = _getPosition.top,\n      left = _getPosition.left,\n      right = _getPosition.right,\n      bottom = _getPosition.bottom,\n      width = _getPosition.width,\n      height = _getPosition.height;\n\n  return {\n    top: top - parentBox.top,\n    left: left - parentBox.left,\n    right: parentBox.right - right,\n    bottom: parentBox.bottom - bottom,\n    width: width,\n    height: height\n  };\n};\n\n/** getPositionDelta\n * This method returns the delta between two bounding boxes, to figure out\n * how many pixels on each axis the element has moved.\n *\n */\nvar getPositionDelta = exports.getPositionDelta = function getPositionDelta(_ref3) {\n  var childDomNode = _ref3.childDomNode,\n      childBoundingBox = _ref3.childBoundingBox,\n      parentBoundingBox = _ref3.parentBoundingBox,\n      getPosition = _ref3.getPosition;\n\n  // TEMP: A mystery bug is sometimes causing unnecessary boundingBoxes to\n  var defaultBox = { top: 0, left: 0, right: 0, bottom: 0, height: 0, width: 0 };\n\n  // Our old box is its last calculated position, derived on mount or at the\n  // start of the previous animation.\n  var oldRelativeBox = childBoundingBox || defaultBox;\n  var parentBox = parentBoundingBox || defaultBox;\n\n  // Our new box is the new final resting place: Where we expect it to wind up\n  // after the animation. First we get the box in absolute terms (AKA relative\n  // to the viewport), and then we calculate its relative box (relative to the\n  // parent container)\n  var newAbsoluteBox = getPosition(childDomNode);\n  var newRelativeBox = {\n    top: newAbsoluteBox.top - parentBox.top,\n    left: newAbsoluteBox.left - parentBox.left\n  };\n\n  return [oldRelativeBox.left - newRelativeBox.left, oldRelativeBox.top - newRelativeBox.top];\n};\n\n/** removeNodeFromDOMFlow\n * This method does something very sneaky: it removes a DOM node from the\n * document flow, but without actually changing its on-screen position.\n *\n * It works by calculating where the node is, and then applying styles\n * so that it winds up being positioned absolutely, but in exactly the\n * same place.\n *\n * This is a vital part of the FLIP technique.\n */\nvar removeNodeFromDOMFlow = exports.removeNodeFromDOMFlow = function removeNodeFromDOMFlow(childData, verticalAlignment) {\n  var domNode = childData.domNode,\n      boundingBox = childData.boundingBox;\n\n\n  if (!domNode || !boundingBox) {\n    return;\n  }\n\n  // For this to work, we have to offset any given `margin`.\n  var computed = window.getComputedStyle(domNode);\n\n  // We need to clean up margins, by converting and removing suffix:\n  // eg. '21px' -> 21\n  var marginAttrs = ['margin-top', 'margin-left', 'margin-right'];\n  var margins = marginAttrs.reduce(function (acc, margin) {\n    var propertyVal = computed.getPropertyValue(margin);\n\n    return _extends({}, acc, _defineProperty({}, margin, Number(propertyVal.replace('px', ''))));\n  }, {});\n\n  // If we're bottom-aligned, we need to add the height of the child to its\n  // top offset. This is because, when the container is bottom-aligned, its\n  // height shrinks from the top, not the bottom. We're removing this node\n  // from the flow, so the top is going to drop by its height.\n  var topOffset = verticalAlignment === 'bottom' ? boundingBox.top - boundingBox.height : boundingBox.top;\n\n  var styles = {\n    position: 'absolute',\n    top: topOffset - margins['margin-top'] + 'px',\n    left: boundingBox.left - margins['margin-left'] + 'px',\n    right: boundingBox.right - margins['margin-right'] + 'px'\n  };\n\n  applyStylesToDOMNode({ domNode: domNode, styles: styles });\n};\n\n/** updateHeightPlaceholder\n * An optional property to FlipMove is a `maintainContainerHeight` boolean.\n * This property creates a node that fills space, so that the parent\n * container doesn't collapse when its children are removed from the\n * document flow.\n */\nvar updateHeightPlaceholder = exports.updateHeightPlaceholder = function updateHeightPlaceholder(_ref4) {\n  var domNode = _ref4.domNode,\n      parentData = _ref4.parentData,\n      getPosition = _ref4.getPosition;\n\n  var parentDomNode = parentData.domNode;\n  var parentBoundingBox = parentData.boundingBox;\n\n  if (!parentDomNode || !parentBoundingBox) {\n    return;\n  }\n\n  // We need to find the height of the container *without* the placeholder.\n  // Since it's possible that the placeholder might already be present,\n  // we first set its height to 0.\n  // This allows the container to collapse down to the size of just its\n  // content (plus container padding or borders if any).\n  applyStylesToDOMNode({ domNode: domNode, styles: { height: '0' } });\n\n  // Find the distance by which the container would be collapsed by elements\n  // leaving. We compare the freshly-available parent height with the original,\n  // cached container height.\n  var originalParentHeight = parentBoundingBox.height;\n  var collapsedParentHeight = getPosition(parentDomNode).height;\n  var reductionInHeight = originalParentHeight - collapsedParentHeight;\n\n  // If the container has become shorter, update the padding element's\n  // height to take up the difference. Otherwise set its height to zero,\n  // so that it has no effect.\n  var styles = {\n    height: reductionInHeight > 0 ? reductionInHeight + 'px' : '0'\n  };\n\n  applyStylesToDOMNode({ domNode: domNode, styles: styles });\n};\n\nvar getNativeNode = exports.getNativeNode = function getNativeNode(element) {\n  // When running in a windowless environment, abort!\n  if (typeof HTMLElement === 'undefined') {\n    return null;\n  }\n\n  // `element` may already be a native node.\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  // While ReactDOM's `findDOMNode` is discouraged, it's the only\n  // publicly-exposed way to find the underlying DOM node for\n  // composite components.\n  var foundNode = (0, _reactDom.findDOMNode)(element);\n\n  if (!(foundNode instanceof HTMLElement)) {\n    // Text nodes are not supported\n    return null;\n  }\n\n  return foundNode;\n};\n\nvar createTransitionString = exports.createTransitionString = function createTransitionString(index, props) {\n  var delay = props.delay,\n      duration = props.duration;\n  var staggerDurationBy = props.staggerDurationBy,\n      staggerDelayBy = props.staggerDelayBy,\n      easing = props.easing;\n\n\n  delay += index * staggerDelayBy;\n  duration += index * staggerDurationBy;\n\n  var cssProperties = ['transform', 'opacity'];\n\n  return cssProperties.map(function (prop) {\n    return prop + ' ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n  }).join(', ');\n};\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/dom-manipulation.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/enter-leave-presets.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/enter-leave-presets.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar enterPresets = exports.enterPresets = {\n  elevator: {\n    from: { transform: 'scale(0)', opacity: '0' },\n    to: { transform: '', opacity: '' }\n  },\n  fade: {\n    from: { opacity: '0' },\n    to: { opacity: '' }\n  },\n  accordionVertical: {\n    from: { transform: 'scaleY(0)', transformOrigin: 'center top' },\n    to: { transform: '', transformOrigin: 'center top' }\n  },\n  accordionHorizontal: {\n    from: { transform: 'scaleX(0)', transformOrigin: 'left center' },\n    to: { transform: '', transformOrigin: 'left center' }\n  },\n  none: null\n};\n/**\n * React Flip Move | enterLeavePresets\n * (c) 2016-present Joshua Comeau\n *\n * This contains the master list of presets available for enter/leave animations,\n * along with the mapping between preset and styles.\n */\nvar leavePresets = exports.leavePresets = {\n  elevator: {\n    from: { transform: 'scale(1)', opacity: '1' },\n    to: { transform: 'scale(0)', opacity: '0' }\n  },\n  fade: {\n    from: { opacity: '1' },\n    to: { opacity: '0' }\n  },\n  accordionVertical: {\n    from: { transform: 'scaleY(1)', transformOrigin: 'center top' },\n    to: { transform: 'scaleY(0)', transformOrigin: 'center top' }\n  },\n  accordionHorizontal: {\n    from: { transform: 'scaleX(1)', transformOrigin: 'left center' },\n    to: { transform: 'scaleX(0)', transformOrigin: 'left center' }\n  },\n  none: null\n};\n\n// For now, appearPresets will be identical to enterPresets.\n// Assigning a custom export in case we ever want to add appear-specific ones.\nvar appearPresets = exports.appearPresets = enterPresets;\n\n// Embarrassingly enough, v2.0 launched with typo'ed preset names.\n// To avoid penning a new major version over something so inconsequential,\n// we're supporting both spellings. In a future version, these alternatives\n// may be deprecated.\n// $FlowFixMe\nenterPresets.accordianVertical = enterPresets.accordionVertical;\n// $FlowFixMe\nenterPresets.accordianHorizontal = enterPresets.accordionHorizontal;\n// $FlowFixMe\nleavePresets.accordianVertical = leavePresets.accordionVertical;\n// $FlowFixMe\nleavePresets.accordianHorizontal = leavePresets.accordionHorizontal;\n\nvar defaultPreset = exports.defaultPreset = 'elevator';\nvar disablePreset = exports.disablePreset = 'none';\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/enter-leave-presets.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/error-messages.js":
/*!************************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/error-messages.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\nfunction warnOnce(msg) {\n  var hasWarned = false;\n  return function () {\n    if (!hasWarned) {\n      console.warn(msg);\n      hasWarned = true;\n    }\n  };\n}\nvar statelessFunctionalComponentSupplied = exports.statelessFunctionalComponentSupplied = warnOnce('\\n>> Error, via react-flip-move <<\\n\\nYou provided a stateless functional component as a child to <FlipMove>. Unfortunately, SFCs aren\\'t supported, because Flip Move needs access to the backing instances via refs, and SFCs don\\'t have a public instance that holds that info.\\n\\nPlease wrap your components in a native element (eg. <div>), or a non-functional component.\\n');\n\nvar invalidTypeForTimingProp = exports.invalidTypeForTimingProp = function invalidTypeForTimingProp(args) {\n  return console.error('\\n>> Error, via react-flip-move <<\\n\\nThe prop you provided for \\'' + args.prop + '\\' is invalid. It needs to be a positive integer, or a string that can be resolved to a number. The value you provided is \\'' + args.value + '\\'.\\n\\nAs a result,  the default value for this parameter will be used, which is \\'' + args.defaultValue + '\\'.\\n');\n};\n\nvar deprecatedDisableAnimations = exports.deprecatedDisableAnimations = warnOnce('\\n>> Warning, via react-flip-move <<\\n\\nThe \\'disableAnimations\\' prop you provided is deprecated. Please switch to use \\'disableAllAnimations\\'.\\n\\nThis will become a silent error in future versions of react-flip-move.\\n');\n\nvar invalidEnterLeavePreset = exports.invalidEnterLeavePreset = function invalidEnterLeavePreset(args) {\n  return console.error('\\n>> Error, via react-flip-move <<\\n\\nThe enter/leave preset you provided is invalid. We don\\'t currently have a \\'' + args.value + ' preset.\\'\\n\\nAcceptable values are ' + args.acceptableValues + '. The default value of \\'' + args.defaultValue + '\\' will be used.\\n');\n};\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/error-messages.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/helpers.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/helpers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.omit = omit;\nexports.arraysEqual = arraysEqual;\nvar isElementAnSFC = exports.isElementAnSFC = function isElementAnSFC(element) {\n  var isNativeDOMElement = typeof element.type === 'string';\n\n  if (isNativeDOMElement) {\n    return false;\n  }\n\n  return !element.type.prototype.isReactComponent;\n};\nfunction omit(obj) {\n  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    if (attrs.indexOf(key) === -1) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\n\nfunction arraysEqual(a, b) {\n  var sameObject = a === b;\n  if (sameObject) {\n    return true;\n  }\n\n  var notBothArrays = !Array.isArray(a) || !Array.isArray(b);\n  var differentLengths = a.length !== b.length;\n\n  if (notBothArrays || differentLengths) {\n    return false;\n  }\n\n  return a.every(function (element, index) {\n    return element === b[index];\n  });\n}\n\nfunction memoizeString(fn) {\n  var cache = {};\n\n  return function (str) {\n    if (!cache[str]) {\n      cache[str] = fn(str);\n    }\n    return cache[str];\n  };\n}\n\nvar hyphenate = exports.hyphenate = memoizeString(function (str) {\n  return str.replace(/([A-Z])/g, '-$1').toLowerCase();\n});\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/helpers.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/index.js":
/*!***************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FlipMove = __webpack_require__(/*! ./FlipMove */ \"../node_modules/@houshuang/react-flip-move/lib/FlipMove.js\");\n\nvar _FlipMove2 = _interopRequireDefault(_FlipMove);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _FlipMove2.default;\n/**\n * React Flip Move\n * (c) 2016-present Joshua Comeau\n */\n\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/index.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/polyfills.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/polyfills.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// @noflow\n/**\n * React Flip Move - Polyfills\n * (c) 2016-present Joshua Comeau\n */\n\n/* eslint-disable */\n\nif (!Array.prototype.find) {\n  Array.prototype.find = function (predicate) {\n    if (this === null) {\n      throw new TypeError('Array.prototype.find called on null or undefined');\n    }\n    if (typeof predicate !== 'function') {\n      throw new TypeError('predicate must be a function');\n    }\n    var list = Object(this);\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    var value = void 0;\n\n    for (var i = 0; i < length; i++) {\n      value = list[i];\n      if (predicate.call(thisArg, value, i, list)) {\n        return value;\n      }\n    }\n    return undefined;\n  };\n}\n\nif (!Array.prototype.every) {\n  Array.prototype.every = function (callbackfn, thisArg) {\n    'use strict';\n\n    var T, k;\n\n    if (this == null) {\n      throw new TypeError('this is null or not defined');\n    }\n\n    var O = Object(this);\n    var len = O.length >>> 0;\n\n    if (typeof callbackfn !== 'function') {\n      throw new TypeError();\n    }\n\n    if (arguments.length > 1) {\n      T = thisArg;\n    }\n\n    k = 0;\n\n    while (k < len) {\n\n      var kValue;\n\n      if (k in O) {\n        kValue = O[k];\n\n        var testResult = callbackfn.call(T, kValue, k, O);\n\n        if (!testResult) {\n          return false;\n        }\n      }\n      k++;\n    }\n    return true;\n  };\n}\n\nif (!Array.isArray) {\n  Array.isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/polyfills.js?");

/***/ }),

/***/ "../node_modules/@houshuang/react-flip-move/lib/prop-converter.js":
/*!************************************************************************!*\
  !*** ../node_modules/@houshuang/react-flip-move/lib/prop-converter.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _errorMessages = __webpack_require__(/*! ./error-messages */ \"../node_modules/@houshuang/react-flip-move/lib/error-messages.js\");\n\nvar _enterLeavePresets = __webpack_require__(/*! ./enter-leave-presets */ \"../node_modules/@houshuang/react-flip-move/lib/enter-leave-presets.js\");\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"../node_modules/@houshuang/react-flip-move/lib/helpers.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n/**\n * React Flip Move | propConverter\n * (c) 2016-present Joshua Comeau\n *\n * Abstracted away a bunch of the messy business with props.\n *   - props flow types and defaultProps\n *   - Type conversion (We accept 'string' and 'number' values for duration,\n *     delay, and other fields, but we actually need them to be ints.)\n *   - Children conversion (we need the children to be an array. May not always\n *     be, if a single child is passed in.)\n *   - Resolving animation presets into their base CSS styles\n */\n/* eslint-disable block-scoped-var */\n\nvar nodeEnv = void 0;\ntry {\n  nodeEnv = \"development\";\n} catch (e) {\n  nodeEnv = 'development';\n}\n\nfunction propConverter(ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class = function (_Component) {\n    _inherits(FlipMovePropConverter, _Component);\n\n    function FlipMovePropConverter() {\n      _classCallCheck(this, FlipMovePropConverter);\n\n      return _possibleConstructorReturn(this, (FlipMovePropConverter.__proto__ || Object.getPrototypeOf(FlipMovePropConverter)).apply(this, arguments));\n    }\n\n    _createClass(FlipMovePropConverter, [{\n      key: 'checkForStatelessFunctionalComponents',\n\n\n      // eslint-disable-next-line class-methods-use-this\n      value: function checkForStatelessFunctionalComponents(children) {\n        // Skip all console warnings in production.\n        // Bail early, to avoid unnecessary work.\n        if (nodeEnv === 'production') {\n          return;\n        }\n\n        // FlipMove does not support stateless functional components.\n        // Check to see if any supplied components won't work.\n        // If the child doesn't have a key, it means we aren't animating it.\n        // It's allowed to be an SFC, since we ignore it.\n        var childArray = _react.Children.toArray(children);\n        var noStateless = childArray.every(function (child) {\n          return !(0, _helpers.isElementAnSFC)(child) || typeof child.key === 'undefined';\n        });\n\n        if (!noStateless) {\n          (0, _errorMessages.statelessFunctionalComponentSupplied)();\n        }\n      }\n    }, {\n      key: 'convertProps',\n      value: function convertProps(props) {\n        var workingProps = {\n          // explicitly bypass the props that don't need conversion\n          children: props.children,\n          easing: props.easing,\n          onStart: props.onStart,\n          onFinish: props.onFinish,\n          onStartAll: props.onStartAll,\n          onFinishAll: props.onFinishAll,\n          typeName: props.typeName,\n          disableAllAnimations: props.disableAllAnimations,\n          getPosition: props.getPosition,\n          maintainContainerHeight: props.maintainContainerHeight,\n          verticalAlignment: props.verticalAlignment,\n\n          // Do string-to-int conversion for all timing-related props\n          duration: this.convertTimingProp('duration'),\n          delay: this.convertTimingProp('delay'),\n          staggerDurationBy: this.convertTimingProp('staggerDurationBy'),\n          staggerDelayBy: this.convertTimingProp('staggerDelayBy'),\n\n          // Our enter/leave animations can be specified as boolean (default or\n          // disabled), string (preset name), or object (actual animation values).\n          // Let's standardize this so that they're always objects\n          appearAnimation: this.convertAnimationProp(props.appearAnimation, _enterLeavePresets.appearPresets),\n          enterAnimation: this.convertAnimationProp(props.enterAnimation, _enterLeavePresets.enterPresets),\n          leaveAnimation: this.convertAnimationProp(props.leaveAnimation, _enterLeavePresets.leavePresets),\n\n          delegated: {}\n        };\n\n        this.checkForStatelessFunctionalComponents(workingProps.children);\n\n        // Accept `disableAnimations`, but add a deprecation warning\n        if (typeof props.disableAnimations !== 'undefined') {\n          if (nodeEnv !== 'production') {\n            (0, _errorMessages.deprecatedDisableAnimations)();\n          }\n\n          workingProps.disableAllAnimations = props.disableAnimations;\n        }\n\n        // Gather any additional props;\n        // they will be delegated to the ReactElement created.\n        var primaryPropKeys = Object.keys(workingProps);\n        var delegatedProps = (0, _helpers.omit)(this.props, primaryPropKeys);\n\n        // The FlipMove container element needs to have a non-static position.\n        // We use `relative` by default, but it can be overridden by the user.\n        // Now that we're delegating props, we need to merge this in.\n        delegatedProps.style = _extends({\n          position: 'relative'\n        }, delegatedProps.style);\n\n        workingProps.delegated = delegatedProps;\n\n        return workingProps;\n      }\n    }, {\n      key: 'convertTimingProp',\n      value: function convertTimingProp(prop) {\n        var rawValue = this.props[prop];\n\n        var value = typeof rawValue === 'number' ? rawValue : parseInt(rawValue, 10);\n\n        if (isNaN(value)) {\n          var defaultValue = FlipMovePropConverter.defaultProps[prop];\n\n          if (nodeEnv !== 'production') {\n            (0, _errorMessages.invalidTypeForTimingProp)({\n              prop: prop,\n              value: rawValue,\n              defaultValue: defaultValue\n            });\n          }\n\n          return defaultValue;\n        }\n\n        return value;\n      }\n\n      // eslint-disable-next-line class-methods-use-this\n\n    }, {\n      key: 'convertAnimationProp',\n      value: function convertAnimationProp(animation, presets) {\n        switch (typeof animation === 'undefined' ? 'undefined' : _typeof(animation)) {\n          case 'boolean':\n            {\n              // If it's true, we want to use the default preset.\n              // If it's false, we want to use the 'none' preset.\n              return presets[animation ? _enterLeavePresets.defaultPreset : _enterLeavePresets.disablePreset];\n            }\n\n          case 'string':\n            {\n              var presetKeys = Object.keys(presets);\n\n              if (presetKeys.indexOf(animation) === -1) {\n                if (nodeEnv !== 'production') {\n                  (0, _errorMessages.invalidEnterLeavePreset)({\n                    value: animation,\n                    acceptableValues: presetKeys.join(', '),\n                    defaultValue: _enterLeavePresets.defaultPreset\n                  });\n                }\n\n                return presets[_enterLeavePresets.defaultPreset];\n              }\n\n              return presets[animation];\n            }\n\n          default:\n            {\n              return animation;\n            }\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(ComposedComponent, this.convertProps(this.props));\n      }\n    }]);\n\n    return FlipMovePropConverter;\n  }(_react.Component), _class.defaultProps = {\n    easing: 'ease-in-out',\n    duration: 350,\n    delay: 0,\n    staggerDurationBy: 0,\n    staggerDelayBy: 0,\n    typeName: 'div',\n    enterAnimation: _enterLeavePresets.defaultPreset,\n    leaveAnimation: _enterLeavePresets.defaultPreset,\n    disableAllAnimations: false,\n    getPosition: function getPosition(node) {\n      return node.getBoundingClientRect();\n    },\n    maintainContainerHeight: false,\n    verticalAlignment: 'top'\n  }, _temp;\n}\n\nexports.default = propConverter;\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack:///../node_modules/@houshuang/react-flip-move/lib/prop-converter.js?");

/***/ })

}]);